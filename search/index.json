[{"content":"简介 golang 模块管理，类似于 php 中的 composer 管理工具\n基础 帮助 1 2 3 4 5 6 7 8 9 10 go help mod download download modules to local cache // 下载依赖 edit edit go.mod from tools or scripts // 编辑依赖 graph print module requirement graph // 打印依赖 init initialize new module in current directory // 初始化 go mod init name tidy add missing and remove unused modules // 更新、删除未使用依赖 vendor make vendored copy of dependencies // 拷贝依赖到vendor目录 verify verify dependencies have expected content // 校验依赖 why explain why packages or modules are needed // 解释为什么需要该依赖 启用 1 go env -w GO111MODULE=on 查看模块列表 1 go list -m -mod=mod all 下载依赖项 提示：该操作会自动修改 go.mod 文件\n1 2 3 4 5 6 7 go get golang.org/x/text # 下载指定版本 go get golang.org/x/text@v0.0.1 # 下载指定提交记录（2df3781 为记录哈希值） go get golang.org/x/text@2df3781 查看依赖版本 1 2 3 4 go list -m -versions -mod=mod rsc.io/sampler # 返回内容示例： rsc.io/sampler v1.0.0 v1.2.0 v1.2.1 v1.3.0 v1.3.1 v1.99.99 安装依赖 提示：该操作会自动下载依赖项，并同步到项目 vendor 目录下\n1 2 \u0026gt; go get rsc.io/sampler@v1.3.1 \u0026gt; go mod vendor 扩展 修改环境变量 1 2 # 开启 go module \u0026gt; go env -w GO111MODULE=on go module 代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 原始值：GOPROXY=https://proxy.golang.org,direct # 取消使用代理 \u0026gt; go env -u GOPROXY # 百度代理 \u0026gt; go env -w GOPROXY=https://goproxy.baidu.com # 阿里云代理 \u0026gt; go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/ # Goproxy 中国代理（七牛） \u0026gt; go env -w GOPROXY=https://goproxy.cn,direct # goproxy.io \u0026gt; go env -w GOPROXY=https://goproxy.io,direct go install 安装 生成结果文件 自动将编译好的文件移动到 $GOPATH/pkg 或 $GOPATH/bin 常见问题 terminal prompts disabled go mod tidy 出现 fatal: could not read Username for \u0026lsquo;https://github.com\u0026rsquo;: terminal prompts disabled 错误\n1 2 # 命令前添加环境变量 GIT_TERMINAL_PROMPT GIT_TERMINAL_PROMPT=1 go mod tidy ","date":"2024-03-26T12:08:46+08:00","permalink":"https://hugiot.github.io/blog/p/golang-%E4%B9%8B%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/","title":"golang 之模块管理"},{"content":"简介 交叉编译，即在指定平台编译出其他平台可运行的程序\n原生编译 以下示例默认目标机器架构为：amd64，如需要构建 arm64 需自行修改 GOARCH 参数\nMac 假定当前机器为：Mac 操作系统\n1 2 3 4 # linux CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go # windows CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go Linux 假定当前机器为：Linux 操作系统\n1 2 3 4 # mac CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go # windows CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go Windows 假定当前机器为：Windows 操作系统\n1 2 3 4 # mac SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build main.go # linux SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build main.go 通过 CGO 编译 当包中包含 C 代码，就需要启用 CGO 功能进行编译\ngcc 编译器 主要参数：CGO_ENABLED 、 CC\n示例环境\n当前系统：Ubuntu 22.04 x86_64 go 版本：1.20 1 2 3 4 5 6 7 8 # 使用 gcc 编译器 CGO_ENABLED=1 CC=gcc go build main.go # 使用 aarch64-gcc 编译器 CGO_ENABLED=1 CC=aarch64-linux-gnu-gcc go build main.go # 使用 musl-gcc 编译器 CGO_ENABLED=1 CC=musl-gcc go build main.go 扩展 编译器 gcc GCC，全称为GNU Compiler Collection，是一个由GNU开发的编程语言编译器。最初，GCC只是作为C语言的编译器（GNU C Compiler）而存在，因此其最初的全称就是GNU C Compiler。随着时间的推移，GCC逐渐发展并扩展，变得能够支持更多的编程语言，包括C++、Fortran、Pascal、Objective-C、Java以及Ada等等。\nGCC的一大特点是它的可移植性，即可支持多种硬件平台。例如，它不仅可以编译出在本地环境（如x86_64）运行的程序，还可以编译出在其他平台（如ARM）运行的程序，这被称为交叉编译。此外，GCC还具有按模块化设计的优点，这意味着它可以加入对新语言和新CPU架构的支持。\n总的来说，GCC是一款功能强大、使用广泛的编译器，不仅在软件开发领域有着广泛的应用，也在操作系统的开发中扮演着重要的角色。\ngcc-aarch64-linux-gnu gcc-aarch64-linux-gnu是一个专门为aarch64架构设计的交叉编译工具链，它是由Linaro公司基于GCC推出的ARM交叉编译工具。这个工具链主要用于在x86等其他架构的系统中编译出64位的ARM架构程序。\ngcc-aarch64-linux-gnu常用于嵌入式代码的移植，例如裸机程序、u-boot、Linux kernel、文件系统和App应用程序等。此外，它还可以支持ARMv8 64位目标中的浮点运算策略。\n如果你需要在Ubuntu等操作系统上安装这个工具链，可以使用以下命令：sudo apt-get update; sudo apt-get install gcc-aarch64-linux-gnu。总的来说，gcc-aarch64-linux-gnu是一款强大而灵活的工具，能够大大提高开发和移植工作的效率。\nmusl-gcc musl-gcc是一个基于musl库的静态编译工具。它与传统的gcc工具链相似，但使用了musl库而不是传统的glibc库。静态编译的意思是将所有的代码和依赖库都打包到最终生成的可执行文件中，而不是像动态链接那样在运行时加载依赖库。\nMusl C library，全称是Micro Static Library，是一个用于Linux系统上的C标准库。它与GNU上的glibc以及Android上的bionic类似，但是采用MIT license，对于商业应用来说，相较于glibc要宽松。\n安装编译器 Ubuntu / Debian 1 2 3 4 5 6 7 8 9 10 11 12 sudo apt update # gcc sudo apt install build-essential # gcc-aarch64-linux-gnu # 安装后可执行文件：/usr/bin/aarch64-linux-gnu-gcc sudo apt install gcc-aarch64-linux-gnu # musl-gcc # 安装后可执行文件：/usr/bin/musl-gcc sudo apt install musl-tools ","date":"2024-03-26T11:34:24+08:00","permalink":"https://hugiot.github.io/blog/p/golang-%E4%B9%8B%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/","title":"golang 之交叉编译"},{"content":"简介 go 免密码拉取私有库代码\n步骤 主要分为 git 操作部分和 go 操作部分\ngit 部分 go 默认拉取代码方式是通过 https 协议进行代码获取，免密时需要修改默认拉取方式\n本机公钥添加到代码仓库 SSH Keys（作用：免密拉取代码）\n修改 git 配置（作用：修改go默认拉取代码方式）\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 方式一：命令行方式 git config --global url.\u0026#34;git@github.com:project\u0026#34;.insteadOf \u0026#34;https://github.com/project\u0026#34; # 方式二：配置文件方式 windows配置文件地址：C:\\Users\\Administrator\\.gitconfig linux配置文件地址：：~/.gitconfig # 文件内容如下： [url \u0026#34;git@github.com:project\u0026#34;] insteadOf = https://github.com/project # 验证 git config --list | grep insteadof go 部分 通过设置 go 环境变量设置私有仓库地址\n修改环境变量 1 2 3 \u0026gt; go env -w GO111MODULE=on # github.com/user/private_project 修改为对应仓库地址 \u0026gt; go env -w GOPRIVATE=github.com/user/private_project 下载依赖 1 go mod tidy 拷贝依赖到项目跟目录 1 go mod vendor ","date":"2024-03-26T11:07:33+08:00","permalink":"https://hugiot.github.io/blog/p/golang-%E5%85%8D%E5%AF%86%E6%8B%89%E5%8F%96%E7%A7%81%E6%9C%89%E5%BA%93/","title":"golang 免密拉取私有库"},{"content":"简介 Git（读音为/gɪt/）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。\n基础命令 常规 初始化 1 git init 克隆 1 2 git clone http://xxx.xxx.xxx git clone http://xxx.xxx.xxx dir_name 配置 用户信息配置 1 2 git config --global user.name \u0026#34;xiaocailc\u0026#34; git config --global user.eamil \u0026#34;1643013940@qq.com\u0026#34; 查看配置 1 2 3 4 5 # 查看配置信息列表 git config --list # 查看单个配置信息 git config user.name 删除配置 1 git config --global --unset user.name 配置文件位置 1 2 3 4 5 # windows下： C:\\Users\\Administrator\\.gitconfig # linux 下： ~/.gitconfig 基本流程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. 初始化 git init # 2. 添加暂存区 git add . # 3. 提交 git commit -m \u0026#39;提交备注信息\u0026#39; # 4. 查看状态 git status # 5. 推送至远程仓库 git push origin master # 6. 查看提交日志 git log 远程仓库 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 添加 git remote add xiaocailc http://xxx.xxx.xxx # 重命名 git remote rename xiaocailc new_xiaocailc # 查看 git remote -v # 查看仓库详细信息 git remote show origin # 删除 git remote remove xiaocailc # 修改仓库地址 git remote set-url xiaocailc http://xxx.xxx.xxx 推送和拉取 1 2 3 4 5 6 7 8 # 拉取 git fetch [remote-name] [branch-name] git fetch xiaocai //拉取所有你还没有的数据 # 拉取并合并，需要自行解决冲突,相当于git fetch+git merge git pull [remote-name] [branch-name] git pull xiaocai # 推送 git push [remote-name] [branch-name] git push origin master 分支 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # 查看当前分支 git branch git branch -v # 创建【快捷创建并切换：git checkout -b xiaocai】 git branch xiaocai # 切换分支 git checkout xiaocai # 删除分支 git branch -d xiaocai # 删除远程分支 git push \u0026lt;remote--delete \u0026lt;branch\u0026gt; # 或 git push \u0026lt;remote:\u0026lt;branch\u0026gt; # 合并分支,合并其他分支到当前分支 git merge xiaocai # 查看远程分支 git branch -r # 本地检出远程分支 git fetch git checkout -b app origin/app 标签 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 # 查看所有标签 git tag # 查看指定版本详细信息 git show v0.0.1 # 附注标签 git tag -a v0.0.1 -m \u0026#39;my first version tag\u0026#39; # 轻量标签 git tag v0.0.1 # 后期打标签 git tag -a v0.0.1 9fceb02 // 9fceb02为提交哈希值 # 共享标签【推送到远程仓库】 git push origin v0.0.1 //推送单个 git push origin --tags //推送所有 # 删除 git tag -d v0.0.1 git push origin :refs/tags/v0.0.1 //删除远程仓库标签 git push origin --delete v0.0.1 # 检出标签 git checkout 0.0.1 回退 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 回退至当前版本 git reset --hard # 回退某一文件 git chekout file_name # 回退某一版本并保留当前修改 git reset 89jkfehjr35dkfh78923kjh # 回退某一版本并放弃所有修改 git reset --hard 89jkfehjr35dkfh78923kjh # 回退n个版本 git reset HEAD~n //n代表你要回退的版本数量，是数字！！！！ # 回退到和远程版本一样的版本 git reset --hard origin/master // origin代表你远程仓库的名字，master代表分支名 ssh免密提交 将 id_dsa.pub（公钥）上传至 github 或 gitee平台即可，置于公钥如何生成，请自行搜索ssh key的生成。\n帮助 1 2 3 git help command # 例如： git help remote 身份认证 通过添加 $HOME/.netrc 文件进行身份认证，这样通过命令行拉取代码将跳过认证过程\n1 2 # 内容格式如下： machine github.com login USERNAME password APIKEY 常见问题 忽略版本控制文件 1 2 3 4 # 创建忽略版本控制文件 touch .gitignore # 在.gitignore 文件中填写需要忽略版本控制的文件或者文件夹 添加.gitignore后不生效 1 2 3 git rm -r --cached . git add . git commit -m \u0026#34;更新忽略文件\u0026#34; 忽略文件权限 1 git config core.filemode false 401 Unauthorized 1 2 3 4 5 6 7 8 9 10 11 12 # 错误信息 Initialized empty Git repository in /data/slg-git/.git/ error: The requested URL returned error: 401 Unauthorized while accessing https://gitee.com/xiaocailc/slg.git/info/refs fatal: HTTP request failed # 通过git --version查看版本为1.7.0，可能是版本过低导致的，更新版本即可 # 更新git yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm # 安装git yum install git # 更新git yum update git 移除未被监控的文件 1 2 3 4 5 # 删除前查看 git clean -fdn # 删除 git clean -fd 子文件夹添加 .gitignore 1 2 3 4 # 忽略当前文件夹下所有文件 * # 不忽略.gitignore文件 !.gitignore 存储登录凭据信息 1 2 # 首次输入账号密码后，将会将凭据信息明文存储在本地文件：~/.git-credentials git config --global credential.helper store ","date":"2024-03-26T10:46:33+08:00","permalink":"https://hugiot.github.io/blog/p/git-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/","title":"git 使用手册"},{"content":"简介 git 开发分支规范\n分支管理 master 分支（主分支，发布版本） 用于版本发布，每个节点都应该是可发布版本 每次合并到 master 时，都应该添加 tag 标签作为版本号 禁止 develop 或 feature 分支直接合并到 master 分支 hotfix 分支（紧急修复分支） 生产环境紧急 bug 修复分支，由 master 分支创建 bug 修复，合并到 master 和 develop 分支，并删除该分支 release 分支（预发布分支） 发布版本前准备分支，由 develop 分支创建 创建后 develop 的更新不再合并到该分支，该分支只进行 bug 修复和文档修改 版本稳定后，合并到 master 和 develop 分支，并删除该分支 develop 分支（开发分支） 开发主分支 有功能完成，尽早合并到该分支 开发人员应该拉取 develop 分支，尽早解决冲突 feature 分支（功能分支） 由 develop 分支创建，主要在本地开发使用的分支，开发周期不易过长，尽早解决冲突 开发完成合并到 develop 分支，并删除该分支 ","date":"2024-03-26T10:43:43+08:00","permalink":"https://hugiot.github.io/blog/p/git-%E5%BC%80%E5%8F%91%E5%88%86%E6%94%AF%E8%A7%84%E8%8C%83/","title":"git 开发分支规范"},{"content":"简介 正则表达式\n修饰符 标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。\n标记不卸载正则表达式里，标记位于表达式外，格式如下：\n1 /pattern/s 修饰符 描述 i 不区分大小写 g 全局匹配 m 多行匹配，使 ^ 和 $ 匹配每一行的开头和结尾 s 使 . 可以匹配所有字符，默认 . 是匹配换行符 \\n 之外的任何字符 元字符 正则表达式中一些特殊功能符号\n非打印字符 字符 描述 \\cx 匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 \u0026lsquo;c\u0026rsquo; 字符 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ \\r 匹配一个回车符。等价于 \\x0d 和 \\cM \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v] \\t 匹配一个制表符。等价于 \\x09 和 \\cI \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK 特殊字符 字符 描述 $ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 \\n 或 \\r。要匹配 $ 字符本身，请使用 \\$ () 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和 \\) * 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\* + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+ . 匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 \\. [ 标记一个中括号表达式的开始。要匹配 [，请使用 \\[ ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\? \\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， n 匹配字符 n 。\\n 匹配换行符。序列 \\\\ 匹配 \\，而 \\( 则匹配 ( ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \\^ { 标记限定符表达式的开始。要匹配 {，请使用 \\{ ` ` 限定符 字符 描述 * 匹配前面的子表达式零次或多次。例如，zo* 能匹配 \u0026ldquo;z\u0026rdquo; 以及 \u0026ldquo;zoo\u0026rdquo;。* 等价于{0,} + 匹配前面的子表达式一次或多次。例如，\u0026lsquo;zo+\u0026rsquo; 能匹配 \u0026ldquo;zo\u0026rdquo; 以及 \u0026ldquo;zoo\u0026rdquo;，但不能匹配 \u0026ldquo;z\u0026rdquo;。+ 等价于 {1,} ? 匹配前面的子表达式零次或一次。例如，\u0026ldquo;do(es)?\u0026rdquo; 可以匹配 \u0026ldquo;do\u0026rdquo; 、 \u0026ldquo;does\u0026rdquo; 中的 \u0026ldquo;does\u0026rdquo; 、 \u0026ldquo;doxy\u0026rdquo; 中的 \u0026ldquo;do\u0026rdquo; 。? 等价于 {0,1} {n} n 是一个非负整数。匹配确定的 n 次。例如，\u0026lsquo;o{2}\u0026rsquo; 不能匹配 \u0026ldquo;Bob\u0026rdquo; 中的 \u0026lsquo;o\u0026rsquo;，但是能匹配 \u0026ldquo;food\u0026rdquo; 中的两个 o {n,} n 是一个非负整数。至少匹配n 次。例如，\u0026lsquo;o{2,}\u0026rsquo; 不能匹配 \u0026ldquo;Bob\u0026rdquo; 中的 \u0026lsquo;o\u0026rsquo;，但能匹配 \u0026ldquo;foooood\u0026rdquo; 中的所有 o。\u0026lsquo;o{1,}\u0026rsquo; 等价于 \u0026lsquo;o+\u0026rsquo;。\u0026lsquo;o{0,}\u0026rsquo; 则等价于 \u0026lsquo;o*\u0026rsquo; {n,m} m 和 n 均为非负整数，其中n \u0026lt;= m。最少匹配 n 次且最多匹配 m 次。例如，\u0026ldquo;o{1,3}\u0026rdquo; 将匹配 \u0026ldquo;fooooood\u0026rdquo; 中的前三个 o。\u0026lsquo;o{0,1}\u0026rsquo; 等价于\u0026rsquo;o?\u0026rsquo;。请注意在逗号和两个数之间不能有空格 定位符 字符 描述 ^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配 $ 匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配 \\b 匹配一个单词边界，即字与空格间的位置 \\B 非单词边界匹配 补充其他字符 字符 描述 (pattern) 匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 \u0026lsquo;(\u0026rsquo; 或 \u0026lsquo;)\u0026rsquo; (?:pattern) 匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 \u0026ldquo;或\u0026rdquo; 字符 `( (?=pattern) 正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，`Windows(?=95 (?!pattern) 正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如`Windows(?!95 (?\u0026lt;=pattern) 反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，`(?\u0026lt;=95 (?\u0026lt;!pattern) 反向否定预查，与正向否定预查类似，只是方向相反。例如`(?\u0026lt;!95 `x y` [xyz] 字符集合。匹配所包含的任意一个字符。例如， \u0026lsquo;[abc]\u0026rsquo; 可以匹配 \u0026ldquo;plain\u0026rdquo; 中的 \u0026lsquo;a\u0026rsquo; [^xyz] 负值字符集合。匹配未包含的任意字符。例如， \u0026lsquo;[^abc]\u0026rsquo; 可以匹配 \u0026ldquo;plain\u0026rdquo; 中的\u0026rsquo;p\u0026rsquo;、\u0026rsquo;l\u0026rsquo;、\u0026lsquo;i\u0026rsquo;、\u0026rsquo;n\u0026rsquo; [a-z] 字符范围。匹配指定范围内的任意字符。例如，\u0026rsquo;[a-z]\u0026rsquo; 可以匹配 \u0026lsquo;a\u0026rsquo; 到 \u0026lsquo;z\u0026rsquo; 范围内的任意小写字母字符 [^a-z] 负值字符范围。匹配任何不在指定范围内的任意字符。例如，\u0026rsquo;[^a-z]\u0026rsquo; 可以匹配任何不在 \u0026lsquo;a\u0026rsquo; 到 \u0026lsquo;z\u0026rsquo; 范围内的任意字符 \\b 匹配一个单词边界，也就是指单词和空格间的位置。例如， \u0026rsquo;er\\b\u0026rsquo; 可以匹配\u0026quot;never\u0026quot; 中的 \u0026rsquo;er\u0026rsquo;，但不能匹配 \u0026ldquo;verb\u0026rdquo; 中的 \u0026rsquo;er\u0026rsquo; \\B 匹配非单词边界。\u0026rsquo;er\\B\u0026rsquo; 能匹配 \u0026ldquo;verb\u0026rdquo; 中的 \u0026rsquo;er\u0026rsquo;，但不能匹配 \u0026ldquo;never\u0026rdquo; 中的 \u0026rsquo;er\u0026rsquo; \\cx 匹配由 x 指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 \u0026lsquo;c\u0026rsquo; 字符 \\d 匹配一个数字字符。等价于 [0-9] \\D 匹配一个非数字字符。等价于 [^0-9] \\f 匹配一个换页符。等价于 \\x0c 和 \\cL \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ \\r 匹配一个回车符。等价于 \\x0d 和 \\cM \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v] \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v] \\t 匹配一个制表符。等价于 \\x09 和 \\cI \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK \\w 匹配字母、数字、下划线。等价于\u0026rsquo;[A-Za-z0-9_]\u0026rsquo; \\W 匹配非字母、数字、下划线。等价于 \u0026lsquo;[^A-Za-z0-9_]\u0026rsquo; \\xn 匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，\u0026rsquo;\\x41\u0026rsquo; 匹配 \u0026ldquo;A\u0026rdquo;。\u0026rsquo;\\x041\u0026rsquo; 则等价于 \u0026lsquo;\\x04\u0026rsquo; \u0026amp; \u0026ldquo;1\u0026rdquo;。正则表达式中可以使用 ASCII 编码 \\num 匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，\u0026rsquo;(.)\\1\u0026rsquo; 匹配两个连续的相同字符 \\n 标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值 \\nm 标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \\nm 将匹配八进制转义值 nm \\nml 如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml \\un 匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \\u00A9 匹配版权符号 (?) ","date":"2024-03-26T10:35:51+08:00","permalink":"https://hugiot.github.io/blog/p/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","title":"正则表达式"},{"content":"简介 为加快国内下载指定仓库速度，一般使用国内镜像源进行加速。\n镜像列表 阿里巴巴开源镜像站 网易开源镜像站 浙江大学开源软件镜像站 中国科学技术大学开源软件镜像 清华大学开源软件镜像站 ","date":"2024-03-26T10:23:05+08:00","permalink":"https://hugiot.github.io/blog/p/%E9%95%9C%E5%83%8F%E7%AB%99/","title":"镜像站"},{"content":"简介 ab 测试工具是 apache 旗下的测试工具\n安装 CentOS 1 yum -y install httpd-tools Ubuntu / Debian 1 apt -y install apache2-utils 使用说明 查看帮助 1 ab -h get请求 1 2 # url 最后需要以 / 结尾，否则会提示 url 错误 ab http://www.baidu.com/ post 请求（携带 json 数据） 示例 json 数据如下（json 数据存储于 message.json 文件中）：\n1 2 3 4 { \u0026#34;name\u0026#34;:\u0026#34;zhangsan\u0026#34;, \u0026#34;age\u0026#34;:20 } 1 2 # 发送请求 ab -p message.json -T \u0026#39;application/json\u0026#39; http://www.baidu.com/ 性能测试 1 2 3 4 5 # 设置请求数量 ab -n 100 http://www.baidu.com/ # 设置请求并发数 ab -c 50 http://www.baidu.com/ abs 用于测试 https 请求，用法同上，命令 ab 替换为 abs\n","date":"2024-03-26T10:13:06+08:00","permalink":"https://hugiot.github.io/blog/p/ab-%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/","title":"ab 工具的安装和使用"},{"content":"简介 wrk是一种现代HTTP基准测试工具，当在单个多核CPU上运行时，能够产生大量负载。\n安装 CentOS 1 yum -y install wrk Ubuntu / Debian 1 apt -y install wrk 使用 查看帮助 1 wrk --help 帮助说明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Usage: wrk \u0026lt;options\u0026gt; \u0026lt;url\u0026gt; Options: -c, --connections \u0026lt;N\u0026gt; Connections to keep open -d, --duration \u0026lt;T\u0026gt; Duration of test -t, --threads \u0026lt;N\u0026gt; Number of threads to use -s, --script \u0026lt;S\u0026gt; Load Lua script file -H, --header \u0026lt;H\u0026gt; Add header to request --latency Print latency statistics --timeout \u0026lt;T\u0026gt; Socket/request timeout -v, --version Print version details Usage: wrk \u0026lt;options\u0026gt; \u0026lt;url\u0026gt; Options: -c, --connections \u0026lt;N\u0026gt; 保持连接数 -d, --duration \u0026lt;T\u0026gt; 持续时长（例如：2s, 2m, 2h） -t, --threads \u0026lt;N\u0026gt; 线程数 -s, --script \u0026lt;S\u0026gt; 加载 Lua 脚本文件 -H, --header \u0026lt;H\u0026gt; 添加请求头 --latency 打印延迟统计 --timeout \u0026lt;T\u0026gt; Socket/request timeout -v, --version 打印版本详情 结果说明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [root@localhost wrk]# wrk -t 2 -c 100 -d 30 --latency http://127.0.0.1:9501/ Running 30s test @ http://127.0.0.1:9501/ 2 threads and 100 connections Thread Stats Avg Stdev Max +/- Stdev Latency 6.20ms 2.28ms 43.28ms 70.45% Req/Sec 7.92k 343.46 8.94k 83.90% Latency Distribution 50% 5.95ms 75% 6.95ms 90% 9.89ms 99% 11.08ms 474222 requests in 30.10s, 85.93MB read Requests/sec: 15755.82 Transfer/sec: 2.85MB Latency：响应时间 Req/Sec：每个线程每秒钟完成的请求数 Avg：平均值 Max：最大值 Stdev：标准差 +/- Stdev：正负一个标准差占比 Requests/sec：每秒请求数（QPS），这是一项压力测试的性能指标，通过这个参数可以看出吞吐量 Transfer/sec：每秒读取数据量 POST 请求 使用 Lua 脚本发送 POST 请求\n创建 Lua 脚本 post.lua，内容如下： 1 2 3 4 5 6 -- example HTTP POST script which demonstrates setting the -- HTTP method, body, and adding a header wrk.method = \u0026#34;POST\u0026#34; wrk.body = \u0026#39;{\u0026#34;name\u0026#34;:\u0026#34;Jone\u0026#34;,\u0026#34;age\u0026#34;:20}\u0026#39; wrk.headers[\u0026#34;Content-Type\u0026#34;] = \u0026#34;application/json\u0026#34; 命令行执行 1 wrk -t 10 -c 100 -d 30s --latency -s post.lua http://127.0.0.1:8000/ping ","date":"2024-03-26T09:59:07+08:00","permalink":"https://hugiot.github.io/blog/p/wrk-%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/","title":"wrk 的安装和使用"},{"content":"简介 这是一个示例文章。\n","date":"2024-03-25T16:57:34+08:00","image":"https://hugiot.github.io/blog/p/%E7%A4%BA%E4%BE%8B/cover_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://hugiot.github.io/blog/p/%E7%A4%BA%E4%BE%8B/","title":"示例"}]