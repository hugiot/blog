<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>IOT on xiaocai&#39;s blog</title>
        <link>https://hugiot.github.io/blog/tags/iot/</link>
        <description>Recent content in IOT on xiaocai&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 30 Mar 2024 09:38:43 +0800</lastBuildDate><atom:link href="https://hugiot.github.io/blog/tags/iot/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Modbus</title>
        <link>https://hugiot.github.io/blog/p/modbus/</link>
        <pubDate>Sat, 30 Mar 2024 09:38:43 +0800</pubDate>
        
        <guid>https://hugiot.github.io/blog/p/modbus/</guid>
        <description>&lt;h2 id=&#34;简介&#34;&gt;
    &lt;a href=&#34;#%e7%ae%80%e4%bb%8b&#34;&gt;#&lt;/a&gt;
    简介
&lt;/h2&gt;&lt;p&gt;Modbus 是一种在工业控制领域广泛使用的串行通信协议，以其开放性、高可靠性和简单易用而成为行业标准。&lt;/p&gt;
&lt;p&gt;以下是关于 Modbus 的详细介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;历史背景：Modbus 由 Modicon 公司（现为施耐德电气 Schneider Electric）于1979年发表，最初设计用于可编程逻辑控制器（PLC）之间的通信。&lt;/li&gt;
&lt;li&gt;通信方式：Modbus 是一个应用层报文传输协议，它定义了设备之间通过不同总线或网络连接进行客户机/服务器通信的方式。这些连接可以是有线的，如EIA/TIA-232-E、EIA-422、EIA/TIA-485-A等，也可以是无线的。&lt;/li&gt;
&lt;li&gt;协议类型：Modbus协议有几种变体，包括 Modbus-RTU、Modbus-ASCII 和 Modbus-TCP。其中，Modbus-RTU是最常用且实现简单的版本，特别适合在单片机上使用。&lt;/li&gt;
&lt;li&gt;应用领域：Modbus主要用于连接PLC和其他自动化设备，如传感器、执行器等，用于监控、控制和数据采集。它的简单性和可靠性使得它在工业自动化领域非常受欢迎。&lt;/li&gt;
&lt;li&gt;技术特点：Modbus 协议的简单性和可靠性是其最大的优点。它允许工程师轻松地在不同的设备之间进行通信，而不必担心复杂的配置或兼容性问题。此外，作为一个开放标准，Modbus 无需支付版权费用，这也是其在工业界广泛应用的原因之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，Modbus 作为一种成熟的工业通信协议，因其易于实施和广泛的支持，成为了工业自动化系统中不可或缺的一部分。无论是在新建项目还是现有系统的升级改造中，Modbus 都是一个非常值得考虑的通信解决方案。&lt;/p&gt;
&lt;h2 id=&#34;通讯方式&#34;&gt;
    &lt;a href=&#34;#%e9%80%9a%e8%ae%af%e6%96%b9%e5%bc%8f&#34;&gt;#&lt;/a&gt;
    通讯方式
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;串口（常用）&lt;/li&gt;
&lt;li&gt;Modbus TCP（常用）&lt;/li&gt;
&lt;li&gt;Modbus UDP&lt;/li&gt;
&lt;li&gt;Modbus RTU/ASCII Over TCP&lt;/li&gt;
&lt;li&gt;Modbus RTU/ASCII Over UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能码&#34;&gt;
    &lt;a href=&#34;#%e5%8a%9f%e8%83%bd%e7%a0%81&#34;&gt;#&lt;/a&gt;
    功能码
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;提示：以下请求和响应均忽略显示报文末尾的校验位（2字节）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能码（10进制）&lt;/th&gt;
&lt;th&gt;功能码（16进制）&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0x01&lt;/td&gt;
&lt;td&gt;读线圈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0x05&lt;/td&gt;
&lt;td&gt;写单个线圈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;0x0F&lt;/td&gt;
&lt;td&gt;写多个线圈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;0x02&lt;/td&gt;
&lt;td&gt;读离散量输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;0x04&lt;/td&gt;
&lt;td&gt;读输入寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;0x03&lt;/td&gt;
&lt;td&gt;读保持寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;0x06&lt;/td&gt;
&lt;td&gt;写单个保持寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;td&gt;写多个保持寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;0x01-读线圈&#34;&gt;
    &lt;a href=&#34;#0x01-%e8%af%bb%e7%ba%bf%e5%9c%88&#34;&gt;#&lt;/a&gt;
    0x01 读线圈
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 01 00 00 00 0A&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 0A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应：01 01 02 FF 03&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;数据长度（字节数）&lt;/th&gt;
&lt;th&gt;数据（单字节存储 8 个线圈状态）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;02&lt;/td&gt;
&lt;td&gt;FF 03&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;0x05-写单个线圈&#34;&gt;
    &lt;a href=&#34;#0x05-%e5%86%99%e5%8d%95%e4%b8%aa%e7%ba%bf%e5%9c%88&#34;&gt;#&lt;/a&gt;
    0x05 写单个线圈
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 05 00 00 FF 00&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;线圈地址&lt;/th&gt;
&lt;th&gt;值（0：00 00、1：FF 00）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;05&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;FF 00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应（原样返回）：01 05 00 00 FF 00&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;0x0f-写多个线圈&#34;&gt;
    &lt;a href=&#34;#0x0f-%e5%86%99%e5%a4%9a%e4%b8%aa%e7%ba%bf%e5%9c%88&#34;&gt;#&lt;/a&gt;
    0x0F 写多个线圈
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 0F 00 00 00 01 01 00&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;th&gt;数据长度&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;0F&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 01&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应：01 0F 00 00 00 01&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;0F&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;0x02-读离散量输入&#34;&gt;
    &lt;a href=&#34;#0x02-%e8%af%bb%e7%a6%bb%e6%95%a3%e9%87%8f%e8%be%93%e5%85%a5&#34;&gt;#&lt;/a&gt;
    0x02 读离散量输入
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 02 00 00 00 0A&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;02&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 0A&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应：01 02 02 00 00&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;数据长度（字节数）&lt;/th&gt;
&lt;th&gt;数据（单字节存储 8 个离散输入）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;02&lt;/td&gt;
&lt;td&gt;02&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;0x04-读输入寄存器&#34;&gt;
    &lt;a href=&#34;#0x04-%e8%af%bb%e8%be%93%e5%85%a5%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;#&lt;/a&gt;
    0x04 读输入寄存器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 04 00 00 00 02&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;04&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 02&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应：01 04 04 00 01 00 02&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;数据长度（字节数）&lt;/th&gt;
&lt;th&gt;数据（单寄存器占用2字节）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;04&lt;/td&gt;
&lt;td&gt;04&lt;/td&gt;
&lt;td&gt;00 01 00 02&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;0x03-读保持寄存器&#34;&gt;
    &lt;a href=&#34;#0x03-%e8%af%bb%e4%bf%9d%e6%8c%81%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;#&lt;/a&gt;
    0x03 读保持寄存器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 03 00 00 00 02&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;03&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 02&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应：01 03 04 00 01 00 02&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;数据长度（字节数）&lt;/th&gt;
&lt;th&gt;数据（单寄存器占用2字节）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;03&lt;/td&gt;
&lt;td&gt;04&lt;/td&gt;
&lt;td&gt;00 01 00 02&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;0x06-写单个保持寄存器&#34;&gt;
    &lt;a href=&#34;#0x06-%e5%86%99%e5%8d%95%e4%b8%aa%e4%bf%9d%e6%8c%81%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;#&lt;/a&gt;
    0x06 写单个保持寄存器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 06 00 00 00 01&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;寄存器地址&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;06&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应（原样返回）：01 06 00 00 00 01&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;0x10-写多个保持寄存器&#34;&gt;
    &lt;a href=&#34;#0x10-%e5%86%99%e5%a4%9a%e4%b8%aa%e4%bf%9d%e6%8c%81%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;#&lt;/a&gt;
    0x10 写多个保持寄存器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;请求：01 10 00 00 00 01 02 00 01&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;th&gt;数据长度&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 01&lt;/td&gt;
&lt;td&gt;02&lt;/td&gt;
&lt;td&gt;00 01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;响应：01 10 00 00 00 01&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;从机地址&lt;/th&gt;
&lt;th&gt;功能码&lt;/th&gt;
&lt;th&gt;起始地址&lt;/th&gt;
&lt;th&gt;数量&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 01&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;报文结构&#34;&gt;
    &lt;a href=&#34;#%e6%8a%a5%e6%96%87%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;
    报文结构
&lt;/h2&gt;&lt;h3 id=&#34;modbus-tcp&#34;&gt;
    &lt;a href=&#34;#modbus-tcp&#34;&gt;#&lt;/a&gt;
    Modbus TCP
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;TCP 协议自带校验位，所以 Modbus TCP 报文中不包含校验位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modbus TCP 协议报文组成：&lt;strong&gt;MBAP 报文头&lt;/strong&gt; + &lt;strong&gt;功能码&lt;/strong&gt; + &lt;strong&gt;数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MBAP 报文头&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;长度&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;事务处理标识&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;00 01&lt;/td&gt;
&lt;td&gt;可理解为报文序列号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;协议标识&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;td&gt;00 00 表示 ModbusTCP 协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;长度&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;00 06&lt;/td&gt;
&lt;td&gt;表示接下来的数据长度，单位为字节&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;单元标识符&lt;/td&gt;
&lt;td&gt;1 字节&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;可理解为设备地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;读保持寄存器请求示例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求：00 01 00 00 00 06 01 03 00 00 00 01&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;modbus-rtu&#34;&gt;
    &lt;a href=&#34;#modbus-rtu&#34;&gt;#&lt;/a&gt;
    Modbus RTU
&lt;/h3&gt;&lt;p&gt;Modbus RTU 协议报文组成：&lt;strong&gt;Salve Address&lt;/strong&gt; + &lt;strong&gt;功能码&lt;/strong&gt; + &lt;strong&gt;数据&lt;/strong&gt; + &lt;strong&gt;CRC&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;长度&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Slave Address&lt;/td&gt;
&lt;td&gt;1 字节&lt;/td&gt;
&lt;td&gt;01&lt;/td&gt;
&lt;td&gt;可理解为设备地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;功能码&lt;/td&gt;
&lt;td&gt;1 字节&lt;/td&gt;
&lt;td&gt;06&lt;/td&gt;
&lt;td&gt;06 写单个保持寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;0～252 字节&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CRC&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;0D 0A&lt;/td&gt;
&lt;td&gt;校验数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;modbus-ascii&#34;&gt;
    &lt;a href=&#34;#modbus-ascii&#34;&gt;#&lt;/a&gt;
    Modbus ASCII
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;ASCII 模式下，每个 8 位的字节会被拆分成两个 ASCII 字符进行发送，因此发送的字符量比 RTU 增加一倍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Modbus ASCII 协议报文组成：&lt;strong&gt;开始&lt;/strong&gt; + &lt;strong&gt;地址&lt;/strong&gt; + &lt;strong&gt;功能码&lt;/strong&gt; + &lt;strong&gt;数据&lt;/strong&gt; + &lt;strong&gt;LRC&lt;/strong&gt; + &lt;strong&gt;结束&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;长度&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;开始&lt;/td&gt;
&lt;td&gt;1 字节&lt;/td&gt;
&lt;td&gt;3A&lt;/td&gt;
&lt;td&gt;固定以英文冒号（ASCII码：0x3A）开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;地址&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;30 31&lt;/td&gt;
&lt;td&gt;可理解为设备地址，设备地址 01 拆分成两个 ASCII 码可得到：30 31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;功能码&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;30 36&lt;/td&gt;
&lt;td&gt;写单个保持寄存器，功能码 06 拆分成两个 ASCII 码可得到：30 36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据&lt;/td&gt;
&lt;td&gt;0～252 字节&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LRC&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;校验数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;结束&lt;/td&gt;
&lt;td&gt;2 字节&lt;/td&gt;
&lt;td&gt;0D 0A&lt;/td&gt;
&lt;td&gt;固定回车（0x0D）和换行符（0x0A）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;扩展&#34;&gt;
    &lt;a href=&#34;#%e6%89%a9%e5%b1%95&#34;&gt;#&lt;/a&gt;
    扩展
&lt;/h2&gt;&lt;h3 id=&#34;plc-地址&#34;&gt;
    &lt;a href=&#34;#plc-%e5%9c%b0%e5%9d%80&#34;&gt;#&lt;/a&gt;
    PLC 地址
&lt;/h3&gt;&lt;p&gt;在 Modbus 通信中，PLC 地址指的是映射到可编程逻辑控制器（PLC）内部的存储区的地址。&lt;/p&gt;
&lt;p&gt;这些地址通常以10进制描述，共有5位数字。第一位代表寄存器的类型，比如4代表保持寄存器，而3代表输入寄存器。后四位数字则表示具体的寄存器编号。例如，地址40001对应于保持寄存器的第一个单元。在使用Modbus协议的设备或软件中，用户设置或看到的通常是Modbus数据地址。这些地址是用于访问特定数据的，它们通过各种&amp;quot;功能&amp;quot;代码来读写。&lt;/p&gt;
&lt;p&gt;在 Modbus 通信协议中，数据的地址使用形式如 0x、1x、3x 和 4x 分别表示数字量输出、数字量输入、模拟量输入等数据地址。&lt;/p&gt;
&lt;p&gt;这些地址在通信时会使用到，而在编程时，由于PLC地址前缀的区分作用，通常只需说明后四位数，并将其转换为四位十六进制地址。例如，PLC地址40001对应寻址地址0x0000。Modbus主设备指令将地址映射至正确的功能，以便发送到从站。Modbus主设备指令支持的地址范围包括00001至09999为离散输出（线圈），10001至19999为离散输入（触点），30001至39999为输入寄存器（通常是模拟量输入），以及40001至49999为保持寄存器。&lt;/p&gt;
&lt;p&gt;总的来说，了解这些地址与PLC内部元件的对应关系对于实现精准控制非常重要，这也是自动化工程师必须掌握的知识点。&lt;/p&gt;
&lt;h3 id=&#34;rs485&#34;&gt;
    &lt;a href=&#34;#rs485&#34;&gt;#&lt;/a&gt;
    RS485
&lt;/h3&gt;&lt;p&gt;RS485 是一种用于物理通信层的&lt;strong&gt;串行&lt;/strong&gt;通讯标准。&lt;/p&gt;
&lt;p&gt;RS485，完整称呼为EIA/TIA-485，是从它的标准编号和制定标准的组织Electronic Industries Alliance (EIA)得来的。这个标准定义了信号传输的方法，属于开放系统互连模型的第一级。&lt;/p&gt;
&lt;p&gt;RS485设计的初衷是为了克服RS232的局限性，提高数据传输的可靠性和距离。与RS232不同的是，RS485支持多点通信，可以实现更长距离的数据传输。它通过一对双绞线电缆进行差分信号传输，这种差分方式可以有效抵抗共模干扰，从而在噪声环境下保持数据的稳定性。&lt;/p&gt;
&lt;p&gt;RS485通常采用半双工的通信方式，意味着在同一时间，数据只能在一个方向上传输。它使用两根或三根电线完成连接：数据线、带有反向数据的电线以及地线（0V）。由于其强大的抗干扰能力和简便的网络拓扑结构，RS485在工业控制系统中得到了广泛应用，例如自动化设备之间的通信、楼宇自动化系统等。&lt;/p&gt;
&lt;p&gt;总的来说，RS485作为一种稳定可靠的工业通信标准，被广泛应用于需要远距离和多节点通信的场景中。&lt;/p&gt;
&lt;h3 id=&#34;串口&#34;&gt;
    &lt;a href=&#34;#%e4%b8%b2%e5%8f%a3&#34;&gt;#&lt;/a&gt;
    串口
&lt;/h3&gt;&lt;p&gt;串口是计算机上一种非常通用设备通信协议，串口是按位（bit）发送和接收数据。&lt;/p&gt;
&lt;h4 id=&#34;波特率&#34;&gt;
    &lt;a href=&#34;#%e6%b3%a2%e7%89%b9%e7%8e%87&#34;&gt;#&lt;/a&gt;
    波特率
&lt;/h4&gt;&lt;p&gt;衡量通信速度参数，表示每秒中传送的 bit 的个数；&lt;/p&gt;
&lt;p&gt;例如：300 波特率表示每秒发送 300 个 bit；&lt;/p&gt;
&lt;p&gt;波特率和距离成反比，高波特率常常用于放置的很近的仪器间通信。&lt;/p&gt;
&lt;h4 id=&#34;数据位&#34;&gt;
    &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e4%bd%8d&#34;&gt;#&lt;/a&gt;
    数据位
&lt;/h4&gt;&lt;p&gt;衡量通信中实际数据位的参数，计算机发送一个信息包，实际的数据不会是 8 位的；&lt;/p&gt;
&lt;p&gt;比如，标准的 ASCII 码是 0～127（7位），扩展的 ASCII 码是 0～255（8位）；&lt;/p&gt;
&lt;p&gt;如果数据使用简单的文本（标准 ASCII 码），那么每个数据包使用 7 位数据。&lt;/p&gt;
&lt;h4 id=&#34;停止位&#34;&gt;
    &lt;a href=&#34;#%e5%81%9c%e6%ad%a2%e4%bd%8d&#34;&gt;#&lt;/a&gt;
    停止位
&lt;/h4&gt;&lt;p&gt;表示单个包的最后一位，典型值为：1、2 位；&lt;/p&gt;
&lt;p&gt;停止位不仅表示传输的结束，并且提供计算机校正时钟同步的机会。&lt;/p&gt;
&lt;h4 id=&#34;奇偶性校验&#34;&gt;
    &lt;a href=&#34;#%e5%a5%87%e5%81%b6%e6%80%a7%e6%a0%a1%e9%aa%8c&#34;&gt;#&lt;/a&gt;
    奇偶性校验
&lt;/h4&gt;&lt;p&gt;在串口通信中一种简单的检错方式，典型值为：不校验、偶校验、奇校验。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
